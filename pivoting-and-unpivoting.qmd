---
title: "Pivoting and Unpivoting"
filters:
  - interactive-sql
databases:
  - name: pivot
    path: "https://raw.githubusercontent.com/Alaburda/data-analyst-sql-cookbook/master/db/pivot.db"
---

At this point it's likely you're using a database that supports pivoting and unpivoting but it's good to know how to do it yourself.

# Pivoting

The most basic way to pivot is to use a CASE statement for each column you want to pivot.

```{.sql .interactive .pivot}

select 
  ts_id,
  sum(case when ts_year = 2020 then ts_value end) as ts_2020,
  sum(case when ts_year = 2021 then ts_value end) as ts_2021
from yearly_values_long
group by ts_id

```

# Advanced Pivoting

Why I like pivoting in SQL is that I can create arbitrary case when statements to control how my data is pivoted:

```{.sql .interactive .pivot}

select 
  ts_id,
  sum(case when ts_year = 2020 and ts_value > 0.5 then ts_value end) as ts_2020,
  sum(case when ts_year = 2021 and ts_value > 0.5 then ts_value end) as ts_2021
from yearly_values_long
group by ts_id

```

# Unpivoting

I wish you don't ever need to unpivot manually in SQL. A universal way to unpivot in SQL is to take each column of interest and do a UNION ALL.

```{.sql .interactive .pivot}

select 
  ts_id, 
  '2020' as ts_year, 
  [2020] as ts_value
from yearly_values_wide
union all
select 
  ts_id, 
  '2021' as ts_year, 
  [2021] as ts_value
from yearly_values_wide


```

# References

https://sqlperformance.com/2019/09/t-sql-queries/t-sql-pitfalls-pivoting-unpivoting

