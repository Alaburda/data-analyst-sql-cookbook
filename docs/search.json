[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Data Analyst SQL Cookbook",
    "section": "",
    "text": "Preface\nI have a terrible memory for things that I use rarely. When it comes to SQL, there are certain code patterns that are extremely useful for setting up a data model but are basically used once. During the past few years of writing this book, I have also collected some useful tidbits of information that are also VERY valuable to someone starting out as a data analyst. Therefore, this book is called the Data Analyst’s SQL Cookbook. I wrote this so that I have all of my useful patterns in one place and so that I can look them up and share them with others.\nThis book is also open-sourced - your input is most welcome! If you have a useful SQL pattern that you would like to share, please submit a pull request to the GitHub repository. If you have a question or comment, please submit an issue to the GitHub repository.\nThis book was born out of a need to collect SQL queries that were too infrequently used to be memorized but too frequently used to be looked up. The queries are organized by topic and are meant to be used as a reference. The book is also meant to be a living document that will be updated as new queries are discovered and old queries are improved.\nFurthermore, these SQL patterns are not universally known! I have found that many developers are not aware of these patterns and are reinventing the wheel when they encounter these problems. I hope that this book will help to spread these patterns and make them more widely known. My team has been victim to the same problem - we found a solution on StackOverflow only to find a better solution a year down the line."
  },
  {
    "objectID": "pivoting-and-unpivoting.html",
    "href": "pivoting-and-unpivoting.html",
    "title": "5  Pivoting and Unpivoting",
    "section": "",
    "text": "At this point it’s likely you’re using a database that supports pivoting and unpivoting but it’s good to know how to do it yourself.\n\n6 Pivoting\nThe most basic way to pivot is to use a CASE statement for each column you want to pivot.\n\n\nselect \n  ts_id,\n  sum(case when ts_year = 2020 then ts_value end) as ts_2020,\n  sum(case when ts_year = 2021 then ts_value end) as ts_2021\nfrom yearly_values_long\ngroup by ts_id\n\n\n\n7 Advanced Pivoting\nWhy I like pivoting in SQL is that I can create arbitrary case when statements to control how my data is pivoted:\n\n\nselect \n  ts_id,\n  sum(case when ts_year = 2020 and ts_value &gt; 0.5 then ts_value end) as ts_2020,\n  sum(case when ts_year = 2021 and ts_value &gt; 0.5 then ts_value end) as ts_2021\nfrom yearly_values_long\ngroup by ts_id\n\n\n\n8 Unpivoting\nI wish you don’t ever need to unpivot manually in SQL. A universal way to unpivot in SQL is to take each column of interest and do a UNION ALL.\n\n\nselect \n  ts_id, \n  '2020' as ts_year, \n  [2020] as ts_value\nfrom yearly_values_wide\nunion all\nselect \n  ts_id, \n  '2021' as ts_year, \n  [2021] as ts_value\nfrom yearly_values_wide\n\n\n\n\n9 References\nhttps://sqlperformance.com/2019/09/t-sql-queries/t-sql-pitfalls-pivoting-unpivoting"
  },
  {
    "objectID": "filtering.html",
    "href": "filtering.html",
    "title": "4  Filtering",
    "section": "",
    "text": "Everyone starts out with filtering using the WHERE clause but there’s more to it than just specifying columns and their conditions.\n\n5 Anti joins\nAnti joins are a type of join where you return only rows that do not match any row in a given table. For example, let’s say you have users who have done one time purchases but who have no subscription service. You want to send a marketing email to users who don’t have a subscription service yet but have done a one time purchase.\n\n\n\n\n\n6 Filtering on the ON clause"
  }
]