[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Data Analyst SQL Cookbook",
    "section": "",
    "text": "Preface\nI have a terrible memory for things that I use rarely. When it comes to SQL, there are certain code patterns that are extremely useful when doing data modelling. But there’s only so many data models you need to build before actually using them. I wrote this so that I have all of my useful patterns in one place with the benefit of sharing this with you.\nAlso, these SQL patterns are not universally known! I have found that many developers reinvent the wheel or use suboptimal queries. My team has been victim to the same problem - we once found a solution on StackOverflow only to find a better solution a year later."
  },
  {
    "objectID": "pivoting-and-unpivoting.html",
    "href": "pivoting-and-unpivoting.html",
    "title": "5  Pivoting and Unpivoting",
    "section": "",
    "text": "At this point it’s likely you’re using a database that supports pivoting and unpivoting but it’s good to know how to do it yourself.\n\n6 Pivoting\nThe most basic way to pivot is to use a CASE statement for each column you want to pivot.\n\n\nselect \n  ts_id,\n  sum(case when ts_year = 2020 then ts_value end) as ts_2020,\n  sum(case when ts_year = 2021 then ts_value end) as ts_2021\nfrom yearly_values_long\ngroup by ts_id\n\n\n\n7 Advanced Pivoting\nWhy I like pivoting in SQL is that I can create arbitrary case when statements to control how my data is pivoted:\n\n\nselect \n  ts_id,\n  sum(case when ts_year = 2020 and ts_value &gt; 0.5 then ts_value end) as ts_2020,\n  sum(case when ts_year = 2021 and ts_value &gt; 0.5 then ts_value end) as ts_2021\nfrom yearly_values_long\ngroup by ts_id\n\n\n\n8 Unpivoting\nI wish you don’t ever need to unpivot manually in SQL. A universal way to unpivot in SQL is to take each column of interest and do a UNION ALL.\n\n\nselect \n  ts_id, \n  '2020' as ts_year, \n  [2020] as ts_value\nfrom yearly_values_wide\nunion all\nselect \n  ts_id, \n  '2021' as ts_year, \n  [2021] as ts_value\nfrom yearly_values_wide\n\n\n\n\n9 References\nhttps://sqlperformance.com/2019/09/t-sql-queries/t-sql-pitfalls-pivoting-unpivoting"
  },
  {
    "objectID": "filtering.html",
    "href": "filtering.html",
    "title": "4  Filtering",
    "section": "",
    "text": "5 Anti joins\nAnti joins are a type of join where you return only rows that do not match any row in a given table. For example, let’s say you have users who have done one time purchases but who have no subscription service. You want to send a marketing email to users who don’t have a subscription service yet but have done a one time purchase.\nYou can use the ON clause in joins to do neat things, such as:"
  },
  {
    "objectID": "filtering.html#joining-only-to-certain-rows-in-the-main-table",
    "href": "filtering.html#joining-only-to-certain-rows-in-the-main-table",
    "title": "4  Filtering",
    "section": "6.1 Joining only to certain rows in the main table",
    "text": "6.1 Joining only to certain rows in the main table\nThe left join clause and created_channel = 2 ensures that the join only happens\n\n\nselect \n  users.*,\n  subscribers.subscription_type\nfrom users\nleft join subscribers\n  on user_id = users.id\n  and created_channel = 2\nwhere exists (select * from subscribers where users.id = subscribers.user_id)\nlimit 10"
  },
  {
    "objectID": "filtering.html#joining-only-certain-rows-from-another-table",
    "href": "filtering.html#joining-only-certain-rows-from-another-table",
    "title": "4  Filtering",
    "section": "6.2 Joining only certain rows from another table",
    "text": "6.2 Joining only certain rows from another table\n\n\nselect \n  users.*,\n  subscribers.subscription_type\nfrom users\nleft join subscribers\n  on user_id = users.id\n  and subscription_type = 2\nwhere exists (select * from subscribers where users.id = subscribers.user_id)\nlimit 10"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "2 Introduction\nThis is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\nselect * from playlists;\n\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  }
]